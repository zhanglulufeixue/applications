import axios from 'axios';
import { Toast } from 'antd-mobile';
import { routerRedux } from 'dva/router';
// import store from '../index';
import store from '../layouts/index';

const codeMessage = {
  200: '服务器成功返回请求的数据',
  201: '新建或修改数据成功。',
  202: '一个请求已经进入后台排队（异步任务）',
  204: '删除数据成功。',
  400: '发出的请求有错误，服务器没有进行新建或修改数据的操作。',
  401: '用户没有权限（令牌、昵称、密码错误）。',
  403: '用户得到授权，但是访问是被禁止的。',
  404: '发出的请求针对的是不存在的记录，服务器没有进行操作',
  406: '请求的格式不可得。',
  410: '请求的资源被永久删除，且不会再得到的。',
  422: '当创建一个对象时，发生一个验证错误。',
  500: '服务器发生错误，请检查服务器',
  502: '网关错误',
  503: '服务不可用，服务器暂时过载或维护',
  504: '网关超时',
};

const fetch = (url, options) => {
  const axiosInstance = axios.create();
  axiosInstance.defaults.timeout = 10000;
  axiosInstance.defaults.headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';
  const { method = 'get', data } = options;
  switch (method.toLowerCase()) {
    case 'get':
      return axiosInstance.get(url, {
        params: { date: new Date().getTime(), ...data },
      });
    case 'delete':
      return axiosInstance.delete(url, { data });
    case 'head':
      return axiosInstance.head(url, data);
    case 'post':
      return axiosInstance.post(url, { date: new Date().getTime(), ...data });
    case 'put':
      return axiosInstance.put(url, data);
    case 'patch':
      return axiosInstance.patch(url, data);
    default:
      return axiosInstance(options);
  }
};

function checkStatus(response) {
  if (response.status >= 200 && response.status < 300) {
    return response;
  }
  const errortext = codeMessage[response.status] || response.statusText;
  const error = new Error(errortext);
  error.name = response.status;
  error.response = response;
  throw error;
}

function handelData(res) {
  const { data } = res;

  if (data && data.type && typeof data.code === 'number') {
    return data;
  }
}

function handleError(error) {
  const { dispatch } = store;
  const status = error.name;
  if (status === 401) {
    dispatch({
      type: 'app/logout',
    });
    return;
  }
  if (status === 403) {
    dispatch(routerRedux.push('/exception/403'));
    return;
  }
  if (status <= 504 && status >= 500) {
    dispatch(routerRedux.push('/exception/500'));
    return;
  }
  if (status >= 404 && status < 422) {
    dispatch(routerRedux.push('/exception/404'));
  } else {
    Toast.fail('后台服务未启动');
    // Toast.fail(error);
  }
}

export default function request(url, options) {
  return fetch(url, options)
    .then(checkStatus)
    .then(handelData)
    .catch(handleError);
}

export function get(url, options) {
  return request(url, { ...options, method: 'get' });
}

export function post(url, options) {
  return request(url, { ...options, method: 'post' });
}

export function put(url, options) {
  return request(url, { ...options, method: 'put' });
}

export function deleted(url, options) {
  return request(url, { ...options, method: 'deleted' });
}
